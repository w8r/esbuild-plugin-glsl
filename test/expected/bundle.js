// test/src/shader.vert
var shader_default = "#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\n// Passed in from the vertex shader.\nvarying vec3 v_normal;\nvarying vec3 v_surfaceToLight;\nvarying vec3 v_surfaceToView;\n\nuniform vec4 u_color;\nuniform float u_shininess;\n\nvoid main() {\n  // because v_normal is a varying it's interpolated\n  // so it will not be a unit vector. Normalizing it\n  // will make it a unit vector again\n  vec3 normal = normalize(v_normal);\n\n  vec3 surfaceToLightDirection = normalize(v_surfaceToLight);\n  float light = dot(normal, surfaceToLightDirection);\n\n  gl_FragColor = u_color;\n\n  // Lets multiply just the color portion (not the alpha)\n  // by the light\n  gl_FragColor.rgb *= light;\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec3 surfaceToViewDirection = normalize(v_surfaceToView);\n  vec3 halfVector = normalize(surfaceToLightDirection + surfaceToViewDirection);\n\n  float specular = 0.0;\n  if (light > 0.0) {\n    specular = pow(dot(normal, halfVector), u_shininess);\n  }\n\n  // Just add in the specular\n  gl_FragColor.rgb += specular;\n#endif\n}\n";

// test/src/index.ts
console.log(shader_default);
